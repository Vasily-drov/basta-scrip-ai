import numpy as np
np.random.seed(1)

def sigmoid(x):
    return 1/(1 + np.exp(-x))
              
alpha, iterations = (0.001, 3500)
hidden_size = 500
              
weights_0_1 = 0.2*np.random.random((len(vocab),hidden_size)) - 0.1
#print(weights_0_1[0])
weights_1_2 = 0.2*np.random.random((hidden_size,1)) - 0.1
#print(weights_1_2[0])


correct, total = (0,0)

for iter in range(iterations):
    
    for i in range(len(input_dataset)-300):
        
        x,y = (input_dataset[i], int(target_dataset[i]))
        #print('x:   %s, y:     %s' %(x,y))
        #res = ''
        #for q in x:
            #res += vocab[q] + ', '
        layer_1 = sigmoid(np.sum(weights_0_1[x],axis=0))
        layer_2 = sigmoid(np.dot(layer_1,weights_1_2))
      
        #print(layer_2)
        layer_2_delta = layer_2 - y
        #if(i % 100 == 0):
            #print('layer_2:   %s, i: %s' %(layer_2, i))
            #print('layer_2_delta: %s' %np.abs(layer_2_delta))
            
        
        layer_1_delta = layer_2_delta.dot(weights_1_2.T)     
        weights_0_1[x] -= layer_1_delta * alpha
        weights_1_2 -= np.outer(layer_1,layer_2_delta) *alpha
       
        if(np.abs(layer_2_delta) < 0.25):
            correct += 1
        total +=1
        
            #print(res)
            #print('layer_2_delta:  %s' %layer_2_delta)
            #print('layer_2:  %s' %layer_2)
        if(i % 100 == 0):
            progress = str(i/float(len(input_dataset)))
            sys.stdout.write('\rlter: ' + str(iter)\
                             + ' Progress: '+progress[2:4]\
                             +'.'+progress[4:6] + '% Training Accuracy: '\
                             + str(correct/float(total))+'%')

    print()
